int	flushrefs(PVPool*);
void	mkpvmeta(PV *, uchar *);
int	updpv(PV*);
int	flushpv(PV*);
int	hasleg(void);
int	updleglvs(void);
int	initpvt(PV*);
PVE	newpve(PVPool *, PV **, int);
PVE	newpve1(PVPool *, PV **, int);
LV*	lookuplv(char *);
void	addleg(PVPool *, Cmdbuf *);
int	rdident(void *, void *, int, vlong);
int	rdconf(void *, void *, int, vlong);
void	debugpvpfree(PVPool *);
void	xlsetmode(LV *, int);
XLock*	getxlk(void *, int);
int	map(LV *, vlong, int, PVIO *, int);
void	xlatefini(PVIO *);
void	xlsnaplimit(LV *, char *);
LV *	snaptolv(char *);
void	xlsnapsched(LV *lv, char *, char *, char *);
void	xlclrsnapsched(LV *lv, char *, char *);
void	xlcanprune(LV *, int set);
void	xlflushlvmeta(LV *);
void	xlflushpvmeta(PVPool *, char *);
void	xlmemflag(char *);
void	xlmemstir(int);
void	xlthick(LV *);
void	xlthin(LV *);
int 	schedcmp(Snapsched *, Snapsched *);
void	fdiscover(void);
int	flushtarg(int, int);
int	flushshelf(int, int);
int	flush(int, int);
Tag*	tagalloc(void);
void	tagfree(Tag*);
int	label(Tag*, Msg*);
int	rdtarg(void *, void *, int, vlong);
int	rdmask(void *, void *, int, vlong);
int	rdlvexts(void *, void *, int, vlong);
int	rdres(void *, void *, int, vlong);
int	pooldmp(void *, void *, int, vlong);
int	readmem(vlong, void *, int, void *, int);
int	rdpv(void *, void *, int, vlong);
int	rdlvctl(void *, void *, int, vlong);
void	panic(char *, ...);
int	parsetarget(char *);
int	parsetargetbc(char *);
int	unshadow(LV *l);
void	shadowrecv(LV *l, char *rname, char *srclv, char *opts);
void	shadowsend(LV *l, char *rname, char *tgtlv);
int	isshadow(LV *lv);
int	isshadowrecv(LV *lv);
int	isshadowsend(LV *lv);
LV*	shadowrecvlv(char *rname, char *srclv);
int	shadowsendhs(LV *lv, int fd);
void	shadowrecvhs(int fd);
void	shadowrecvgo(LV *lv);
void	shadowdebug(LV *l, char *arg);
int	stopshadow(LV *l);
int	targused(int t);
int	Tfmt(Fmt *f);
#pragma	varargck type "T" int
int	myetheraddr(uchar *, char *);
int	parseether(uchar *, char *);
void	insea(uchar *);
int	isours(uchar *);
int	lunstatus(void *, void *, int, vlong);
int	limitprune(LV *);
void	mirproc(void);
void	shadowsendproc(void);
void	shadowrecvproc(void);
int	snapcopyck(int);
int	issnap(LV *);
int	issnapname(char *);
void	tannounce(LV*);
int	metaextents(int, int);

Msg*	tagsend(Tag *, Msg *m);
PV*	lookuppv(PVPool*, int);
PV*	targ2pv(int t);
long	edio(int, void *, long, vlong, int);
Msg*	aoerdcfg(int);
Msg*	aoerwmsg(int, void *, int, vlong, int);
int	aoesend(int, void *, int);
Msg*	aoesetcfg(int, void *, int, int);
void	aoeshow(Msg*, char *, ...);
vlong	atosize(char *, int *);
int	confread(void*, void*, int, vlong);
int	confwrite(void*, void*, int, vlong);
long	decref(Ref *r);			/* returns 0 iff value is now zero */
void	deldir(Inode*);
int	discovertarg(int);
void	discover(int);
void	diskmsg(AoeDisk*, vlong, int, int, int);
void	doident(LV*, Msg *, AoeDisk*);
void	dump(void *, int);
void	e2e(LVE *, LVE *);
void	edaddpv(PVPool*, Cmdbuf *);
long	edread(int, void*, long, vlong);
long	edwrite(int, void *, long, vlong);
int	validlve(LVE *, LV *);
LVE	*fetchlve(LV *, ulong , LVE *);
int	setlve(LV *src, ulong n, LVE *lve);
char*	fmtconf(uchar *, int);
void	fmtident(LV*, void *a, vlong);
vlong	getlba(uchar *);
void	gotresp(Msg *);
void	incref(Ref *r);
void	initxlock(void);
int	ispvmeta(int targ);
void	clrpvmeta(Cmdbuf*);
ushort	onesum(uchar *, ulong);
Cmdtab*	lookupcmd(Cmdbuf*, Cmdtab*, int);
int	lunctl(void*, void*, int, vlong);
int	lvio(LV *, void *, int, vlong, int);
int	lunread(void*, void*, int, vlong);
int	lunwrite(void*, void*, int, vlong);
int	lvctl(void *, void *, int, vlong);
int	lvstatus(void *, void *, int, vlong);
int	lvctime(void *, void *, int, vlong);
Msg*	msgalloc(void);
Msg*	msgclone(Msg*);
void	msgfree(Msg *);
void	netread(int);
Inode*	newdir(Inode*, char *, int);
Inode*	newfile(Inode*, char *, int, vlong, Iop, Iop, void *);
void	newlun(LV*);
void	newlv(LV*);
void	newpool(PVPool*, char *);
void	newpv(PV*);
int	noread(void*, void*, int, vlong);
int	nowrite(void *, void *, int, vlong);
Cmdbuf*	parsecmd(char *, int);
void	phyinit(void);
int	poolctl(void *, void *, int, vlong);
int	poolstatus(void *, void *, int, vlong);
int	poolsplit(void *, void *, int, vlong);
void	xlrestorepool(int, char **);
void	kickass(void);
Msg*	prepmsg(int, int);
void	printlv(LV*, int);
void	printlve(LVE*);
void	printpv(PV *, int);
void	putlba(uchar *, vlong);
int	pvhisto(void *, void *, int, vlong);
int	pvread(void*, void*, int, vlong);
int	pvstatus(void *, void *, int, vlong);
int	pvctime(void *, void *, int, vlong);
int	pvtread(void *, void *, int, vlong);
int	pvwrite(void*, void*, int, vlong);
int	rdpvstats(void *, void *, int, vlong);
int	wrpvstats(void *, void *, int, vlong);
int	rdpviops(void *, void *, int, vlong);
int	wrpviops(void *, void *, int, vlong);
void	qcmsg(AoeQC*, int, int);
int	rdctl(void*, void *, int, vlong);
int	rdstatus(void *, void *, int, vlong);
int	rdwork(void *, void *, int, vlong);
int	rdlabel(char *, void *, int, vlong);
int	rdlvlab(void *, void *, int, vlong);
int	rdlvpool(void*, void*, int, vlong);
int	rdpoollab(void *, void *, int, vlong);
int	rdpoollvs(void *, void *, int, vlong);
int	rdpvlab(void *, void *, int, vlong);
int	rdlvstats(void *, void *, int, vlong);
int	rdlvserial(void *, void *, int, vlong);
int	rdlvt(void *, void *, int, vlong);
int	rdsnap(void *, void *, int, vlong);
int	rdperf(void *, void *, int, vlong);
int	wrlvstats(void *, void *, int, vlong);
int	rdlviops(void *, void *, int, vlong);
int	wrlviops(void *, void *, int, vlong);
int	rdsnaplimit(void *, void *, int, vlong);
int	rdsnapsched(void *, void *, int, vlong);
int	wrlvserial(void *, void *, int, vlong);
int	readnum(ulong, char *, ulong, ulong, int);
int	readstr(ulong, char *, ulong, char *);
int	savemeta(LV*, ulong);
void	serve(void);
void	setfld(ushort *, int, int, char *);
void	setlba28(ushort *, vlong);
void	setlba48(ushort *, vlong);
void	setserial(LV *);
int	sncpy(char *, void *);
int	retainprune(LV *, Snapsched *);
int	canprune(LV *, LV *);
int	snapclone(LV*, int, ulong, char *, Snapsched *, int, LV**);
void	srvbcst(Msg *, Aoe *);
int	startctl(void);
void	targinit(void);
ulong	usedextents(LV *);
int	wrctl(void *, void *, int, vlong);
int	wrlabel(char **, void *, int);
int	wrlvlab(void *, void *, int, vlong);
int	wrpoollab(void *, void *, int, vlong);
int	wrpvlab(void *, void *, int, vlong);
int	xladdtopool(PVPool *, PV *);
void	xladdpv(int, vlong, PVPool *);
int	xlate(PVIO *, LV *, vlong , int , int);
void	xlcheck4lvs(PVPool *);
void	xlclone(LV*, char *);
void	xlmklun(LV*, char *);
int	xlinitpv(PVPool*, int, int, int, vlong);
void	xllabpool(PVPool *, char *);
int	xlloadpv(PV*, int);
int	xlloadpvt(PV*);
void	xlmask(LV*, int, char **);
void	xlmklv(PVPool*, char *, char *, int);
PVPool*	xlmkpool(char *, char *);
void	xloffline(LV*);
void	xlonline(LV*);
void	xlupdatelegacy(void);
long	xlread(PV *, void *, long, vlong);
void	xlmvlv(PVPool*, char*, char*);
void	xlrmlv(PVPool*, char*);
int	rmlv(LV*);
int	rmrr(int);
int	xlrmpool(char*);
void	xldestroypool(char*);
void	xlrmlun(LV*);
long	xlwrite(PV *, void *, long, vlong);
void	xlrmpv(PVPool*, char *);
void	xlresetserial(LV *);
void	xlclrres(LV *);
void	xlprevsnap(LV *, char *);
void	xlfixsnaplist(void);
ulong	snapname2num(char *);
void	writeconfig(void);
void	mirror(PVPool*, Cmdbuf*, int);
int	brkmirror(PV *);
int	mendmirror(PV *);
void	unmirror(PVPool*, char*);
void	breakmirror(PVPool*, char*);
void	mpromote(PVPool*, char*);
void	stripe(PVPool*, char*);
int	pvvio(PVIO*, int, void *, int);
long	pvio(PV *, void *, long, vlong, int);
long	pviox(PV *, void *, long, vlong, int, int);
int	stopsilver(PV *);
void	failmir(PV*, int, int);
void	dirtyxtnt(PV *, vlong, int);
					/* atomic operations */
long	xadd(long *l, long a);		/* *l += a & return old *l */
ulong	xaddu(ulong *u, long a);	/* *u += a & return old *u */
long	xchg(long *l, long x);		/* *l = x & return old *l */
ulong	xchgu(ulong *u, ulong x);	/* *u = x & return old *u */
void	_xinc(long *l);			/* *l++ */
void	xincu(ulong *u);		/* *u++ */
long	_xdec(long *l);			/* *l-- & return 0 iff *l == 0 */
long	xdecu(ulong *u);		/* *u-- & return 0 iff *u == 0 */
void	dump(void *, int);
uint	convM2PV(uchar *, uchar *, PV *);
XLock*	xwlock(void*, int);
XLock*	xrlock(void*, int);
void	xrunlock(XLock*);
void	xwunlock(XLock*);
int	letarg(PVPool*, LVE *);
int	snapstrcmp(char *, char *);
char*	fmtsnapclass(Snapsched *);
char*	fmtpvstate(int);
void	readconfig(void);
int	maskok(LV *, uchar *);
int	resok(LV *, uchar *, uchar);
void	redirect(PVIO *, Msg *);
void	sendnforget(Msg *);
uint	convM2ML(uchar*, uint, AoeMac*);
uint	convML2M(AoeMac*, uchar*, uint);
int	fixuplegacy(PV*);
void*	vtalloc(ulong, ulong);
Target*	lookuptarg(int);
void	reletarg(Target *);
int	setpvtarget(int, char *);
int	clrpvtarget(int);
void	freelvl(LVL*);
int	snaplist(LV*, LVL **, Snapsched *);
int	verifysnaplist(LV *, LVL *);
int	pvxtntcopy(PV*, int, PV*, int);
int	targxtntcopy(int, int, int, int, int);
int	bufxtntcopy(PV *, int, void *, int, int);
int	xtntio(PV *, int, ulong, ulong, void *, int);
int	xtntcopy(PV *, int, ulong, PV *, int, ulong, ulong);
void	xtntcopyinit(void);
XCB *	xcballoc(void);
XCB *	xcbinit(XCB *, PV *, int, ulong, ulong, void *, int);
void	xcbfree(XCB *);
void	xcbrun(XCB *, int);
void	xcbwait(XCB *, int);
void	trestrict(int);
void	tunrestrict(int);
void	tforget(int);
void	restrictpeer(void);
int	setpeerea(char*);
void	resinit(void);
int	lun2targ(int);
char*	uerr(char*, ...);
char*	alloclvt(LV*, LV*, PV*, int);
void	setprompt(void);
void 	freelve(PVPool*, LV*, ulong, LVE*);
void 	xlresize(LV*, char*);
int 	acquirelve(LV*);
void 	xlrollback(LV *);
uvlong	targlen(int);
uvlong	targlenclean(int);
void	xlmaintmode(int);
void	xliotimeo(char*);
int	strtoday(char *);
char *	sclstostr(int);
int	strtoscls(char *);
int	parsestime(Snapsched *,  char *);
int	parseretain(LV *, int *);
void	schedinit(void);
void	schedtostr(Snapsched *, char *,  int);
void	schedtostimestr(Snapsched *sc, char *buf, int len);
int	sched2retain(LV *, Snapsched *);
int	savesched(LV *, Snapsched *);
int	delsched(LV *, Snapsched *);
void	clrsched(LV *);
void	freepv(PV*);
void	freepool(PVPool*);
void	freelv(LV*);
void	hasmeta(Cmdbuf*);
void	probetarg(Cmdbuf *);

uvlong	todµs(void);
void	zfilter(Iofilter *);
void	addfilter(Iofilter *);
void	delfilter(Iofilter *);
void	incfilter(Iofilter *, uvlong, uvlong);
int	filtersum(Iofilter *, uvlong *, uvlong *, uvlong *, int);
int	iostatfmt(Fmt *);
int	iopsfmt(Fmt *);
void	filtertimer(void);

void	xsyslog(char*, ...);
#define	waserror() (u->nerrlab<NERR ? setjmp(u->errlab[u->nerrlab++]):*(int*)0)
#define	poperror() assert(u->nerrlab-- > 0)
void	error(char *, ...);
void	nexterror(void);

#pragma varargck argpos xsyslog 1
#pragma varargck argpos error 1
#pragma varargck argpos uerr 1

void	schedsave(void);

int	xlrfork(int, char *, ...);
void	xlexits(char *);

#pragma varargck argpos xlrfork 2

int	route(Target *, uchar *, int);

void	system(char *cmd);

int	readfile(char *b, int len, char *fmt, ...); /* Return bytes in b */
#pragma varargck argpos readfile 3

long	alarmset(ulong);
void	alarmclr(long);
int	needalrtsec(uvlong);

void	statinit(XferStat *, int, int, uvlong);
void	statinc(XferStat *, uvlong, uvlong);
void	statclr(XferStat *);

/* Brantley Coile */
/* Soli Deo Gloria */
